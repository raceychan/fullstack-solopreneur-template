// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { LoginGetTokenApiV1TokenPostData, LoginGetTokenApiV1TokenPostResponses, LoginGetTokenApiV1TokenPostErrors, GetUserApiV1MeGetData, GetUserApiV1MeGetResponses, GetUserApiV1MeGetErrors, RemoveTaskApiV1TasksDeleteData, RemoveTaskApiV1TasksDeleteResponses, RemoveTaskApiV1TasksDeleteErrors, GetTasksApiV1TasksGetData, GetTasksApiV1TasksGetResponses, GetTasksApiV1TasksGetErrors, CreateNewTaskApiV1TasksPostData, CreateNewTaskApiV1TasksPostResponses, CreateNewTaskApiV1TasksPostErrors, UpdateTaskApiV1TasksPutData, UpdateTaskApiV1TasksPutResponses, UpdateTaskApiV1TasksPutErrors, LambdaApiV1HealthGetData, LambdaApiV1HealthGetResponses, LambdaApiV1HealthGetErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login Get Token
 * Missing Description
 */
export const loginGetTokenApiV1TokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginGetTokenApiV1TokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginGetTokenApiV1TokenPostResponses, LoginGetTokenApiV1TokenPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/api/v1/token',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get User
 * Missing Description
 */
export const getUserApiV1MeGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserApiV1MeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserApiV1MeGetResponses, GetUserApiV1MeGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/me',
        ...options
    });
};

/**
 * Remove Task
 * Missing Description
 */
export const removeTaskApiV1TasksDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveTaskApiV1TasksDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTaskApiV1TasksDeleteResponses, RemoveTaskApiV1TasksDeleteErrors, ThrowOnError>({
        url: '/api/v1/tasks',
        ...options
    });
};

/**
 * Get Tasks
 * Missing Description
 */
export const getTasksApiV1TasksGet = <ThrowOnError extends boolean = false>(options?: Options<GetTasksApiV1TasksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTasksApiV1TasksGetResponses, GetTasksApiV1TasksGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/tasks',
        ...options
    });
};

/**
 * Create New Task
 * Missing Description
 */
export const createNewTaskApiV1TasksPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewTaskApiV1TasksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewTaskApiV1TasksPostResponses, CreateNewTaskApiV1TasksPostErrors, ThrowOnError>({
        url: '/api/v1/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Task
 * Missing Description
 */
export const updateTaskApiV1TasksPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskApiV1TasksPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTaskApiV1TasksPutResponses, UpdateTaskApiV1TasksPutErrors, ThrowOnError>({
        url: '/api/v1/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * <Lambda>
 * Missing Description
 */
export const lambdaApiV1HealthGet = <ThrowOnError extends boolean = false>(options?: Options<LambdaApiV1HealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LambdaApiV1HealthGetResponses, LambdaApiV1HealthGetErrors, ThrowOnError>({
        url: '/api/v1/health',
        ...options
    });
};