// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { GetData, GetResponses, GetV1GetByOrganizationSlugByProjectSlugData, GetV1GetByOrganizationSlugByProjectSlugResponses, GetV1GetByOrganizationSlugByProjectSlugErrors, PostV1InternalSyncUsersData, PostV1InternalSyncUsersResponses, PostV1InternalSyncUsersErrors, PostV1InternalWebhooksClerkData, PostV1InternalWebhooksClerkResponses, PostV1InternalWebhooksClerkErrors, PostV1InternalWebhooksHeyApiData, PostV1InternalWebhooksHeyApiResponses, PostV1InternalWebhooksHeyApiErrors, GetV1OrganizationsData, GetV1OrganizationsResponses, GetV1OrganizationsErrors, PostV1OrganizationsData, PostV1OrganizationsResponses, PostV1OrganizationsErrors, DeleteV1OrganizationsByOrganizationSlugData, DeleteV1OrganizationsByOrganizationSlugResponses, DeleteV1OrganizationsByOrganizationSlugErrors, GetV1OrganizationsByOrganizationSlugMembersData, GetV1OrganizationsByOrganizationSlugMembersResponses, GetV1OrganizationsByOrganizationSlugMembersErrors, PostV1OrganizationsByOrganizationSlugMembersData, PostV1OrganizationsByOrganizationSlugMembersResponses, PostV1OrganizationsByOrganizationSlugMembersErrors, DeleteV1OrganizationsByOrganizationSlugMembersByUserIdData, DeleteV1OrganizationsByOrganizationSlugMembersByUserIdResponses, DeleteV1OrganizationsByOrganizationSlugMembersByUserIdErrors, GetV1OrganizationsByOrganizationSlugProjectsData, GetV1OrganizationsByOrganizationSlugProjectsResponses, GetV1OrganizationsByOrganizationSlugProjectsErrors, PostV1OrganizationsByOrganizationSlugProjectsData, PostV1OrganizationsByOrganizationSlugProjectsResponses, PostV1OrganizationsByOrganizationSlugProjectsErrors, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugData, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugResponses, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugErrors, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysErrors, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponses, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysErrors, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponses, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdErrors, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponses, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdErrors, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsErrors, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdResponses, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdErrors, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdErrors, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlErrors, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksErrors, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponses, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksErrors, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponses, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdErrors, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdErrors, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponses, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdErrors, PostV1SpecificationsData, PostV1SpecificationsResponses, PostV1SpecificationsErrors, GetV1UsersMeData, GetV1UsersMeResponses, GetV1UsersMeErrors, GetV1UsersByUserIdApiKeysData, GetV1UsersByUserIdApiKeysResponses, GetV1UsersByUserIdApiKeysErrors, PostV1UsersByUserIdApiKeysData, PostV1UsersByUserIdApiKeysResponses, PostV1UsersByUserIdApiKeysErrors, DeleteV1UsersByUserIdApiKeysByApiKeyIdData, DeleteV1UsersByUserIdApiKeysByApiKeyIdResponses, DeleteV1UsersByUserIdApiKeysByApiKeyIdErrors, PostV1UsersByUserIdApiKeysByApiKeyIdData, PostV1UsersByUserIdApiKeysByApiKeyIdResponses, PostV1UsersByUserIdApiKeysByApiKeyIdErrors, GetV1UsersByUserIdRolesData, GetV1UsersByUserIdRolesResponses, GetV1UsersByUserIdRolesErrors, GetV1UsersByUserIdWaitlistsData, GetV1UsersByUserIdWaitlistsResponses, GetV1UsersByUserIdWaitlistsErrors, PostV1UsersByUserIdWaitlistsData, PostV1UsersByUserIdWaitlistsResponses, PostV1UsersByUserIdWaitlistsErrors, DeleteV1UsersByUserIdWaitlistsByWaitlistIdData, DeleteV1UsersByUserIdWaitlistsByWaitlistIdResponses, DeleteV1UsersByUserIdWaitlistsByWaitlistIdErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResponses, unknown, ThrowOnError>({
        responseType: 'text',
        url: '/',
        ...options
    });
};

export const getV1GetByOrganizationSlugByProjectSlug = <ThrowOnError extends boolean = false>(options: Options<GetV1GetByOrganizationSlugByProjectSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1GetByOrganizationSlugByProjectSlugResponses, GetV1GetByOrganizationSlugByProjectSlugErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/get/{organization_slug}/{project_slug}',
        ...options
    });
};

export const postV1InternalSyncUsers = <ThrowOnError extends boolean = false>(options?: Options<PostV1InternalSyncUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV1InternalSyncUsersResponses, PostV1InternalSyncUsersErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/internal/sync-users',
        ...options
    });
};

export const postV1InternalWebhooksClerk = <ThrowOnError extends boolean = false>(options: Options<PostV1InternalWebhooksClerkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1InternalWebhooksClerkResponses, PostV1InternalWebhooksClerkErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/internal/webhooks/clerk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postV1InternalWebhooksHeyApi = <ThrowOnError extends boolean = false>(options: Options<PostV1InternalWebhooksHeyApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1InternalWebhooksHeyApiResponses, PostV1InternalWebhooksHeyApiErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/internal/webhooks/hey-api',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getV1Organizations = <ThrowOnError extends boolean = false>(options?: Options<GetV1OrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV1OrganizationsResponses, GetV1OrganizationsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations',
        ...options
    });
};

export const postV1Organizations = <ThrowOnError extends boolean = false>(options: Options<PostV1OrganizationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1OrganizationsResponses, PostV1OrganizationsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteV1OrganizationsByOrganizationSlug = <ThrowOnError extends boolean = false>(options: Options<DeleteV1OrganizationsByOrganizationSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1OrganizationsByOrganizationSlugResponses, DeleteV1OrganizationsByOrganizationSlugErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}',
        ...options
    });
};

export const getV1OrganizationsByOrganizationSlugMembers = <ThrowOnError extends boolean = false>(options: Options<GetV1OrganizationsByOrganizationSlugMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1OrganizationsByOrganizationSlugMembersResponses, GetV1OrganizationsByOrganizationSlugMembersErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/members',
        ...options
    });
};

export const postV1OrganizationsByOrganizationSlugMembers = <ThrowOnError extends boolean = false>(options: Options<PostV1OrganizationsByOrganizationSlugMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1OrganizationsByOrganizationSlugMembersResponses, PostV1OrganizationsByOrganizationSlugMembersErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteV1OrganizationsByOrganizationSlugMembersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1OrganizationsByOrganizationSlugMembersByUserIdResponses, DeleteV1OrganizationsByOrganizationSlugMembersByUserIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/members/{user_id}',
        ...options
    });
};

export const getV1OrganizationsByOrganizationSlugProjects = <ThrowOnError extends boolean = false>(options: Options<GetV1OrganizationsByOrganizationSlugProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1OrganizationsByOrganizationSlugProjectsResponses, GetV1OrganizationsByOrganizationSlugProjectsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects',
        ...options
    });
};

export const postV1OrganizationsByOrganizationSlugProjects = <ThrowOnError extends boolean = false>(options: Options<PostV1OrganizationsByOrganizationSlugProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1OrganizationsByOrganizationSlugProjectsResponses, PostV1OrganizationsByOrganizationSlugProjectsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlug = <ThrowOnError extends boolean = false>(options: Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugResponses, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}',
        ...options
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys = <ThrowOnError extends boolean = false>(options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/api-keys',
        ...options
    });
};

export const postV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeys = <ThrowOnError extends boolean = false>(options: Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysResponses, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/api-keys',
        ...options
    });
};

export const deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponses, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/api-keys/{api_key_id}',
        ...options
    });
};

export const postV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyId = <ThrowOnError extends boolean = false>(options: Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdResponses, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugApiKeysByApiKeyIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/api-keys/{api_key_id}',
        ...options
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecifications = <ThrowOnError extends boolean = false>(options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/specifications',
        ...options
    });
};

export const deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdResponses, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/specifications/{specification_id}',
        ...options
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationId = <ThrowOnError extends boolean = false>(options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/specifications/{specification_id}',
        ...options
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrl = <ThrowOnError extends boolean = false>(options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugSpecificationsBySpecificationIdUrlErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/specifications/{specification_id}/url',
        ...options
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks = <ThrowOnError extends boolean = false>(options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/webhooks',
        ...options
    });
};

export const postV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooks = <ThrowOnError extends boolean = false>(options: Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksResponses, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponses, DeleteV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/webhooks/{webhook_id}',
        ...options
    });
};

export const getV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId = <ThrowOnError extends boolean = false>(options: Options<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponses, GetV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/webhooks/{webhook_id}',
        ...options
    });
};

export const postV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookId = <ThrowOnError extends boolean = false>(options: Options<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdResponses, PostV1OrganizationsByOrganizationSlugProjectsByProjectSlugWebhooksByWebhookIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{organization_slug}/projects/{project_slug}/webhooks/{webhook_id}',
        ...options
    });
};

export const postV1Specifications = <ThrowOnError extends boolean = false>(options: Options<PostV1SpecificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1SpecificationsResponses, PostV1SpecificationsErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/specifications',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const getV1UsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetV1UsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV1UsersMeResponses, GetV1UsersMeErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/me',
        ...options
    });
};

export const getV1UsersByUserIdApiKeys = <ThrowOnError extends boolean = false>(options: Options<GetV1UsersByUserIdApiKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1UsersByUserIdApiKeysResponses, GetV1UsersByUserIdApiKeysErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/api-keys',
        ...options
    });
};

export const postV1UsersByUserIdApiKeys = <ThrowOnError extends boolean = false>(options: Options<PostV1UsersByUserIdApiKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1UsersByUserIdApiKeysResponses, PostV1UsersByUserIdApiKeysErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/api-keys',
        ...options
    });
};

export const deleteV1UsersByUserIdApiKeysByApiKeyId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1UsersByUserIdApiKeysByApiKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1UsersByUserIdApiKeysByApiKeyIdResponses, DeleteV1UsersByUserIdApiKeysByApiKeyIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/api-keys/{api_key_id}',
        ...options
    });
};

export const postV1UsersByUserIdApiKeysByApiKeyId = <ThrowOnError extends boolean = false>(options: Options<PostV1UsersByUserIdApiKeysByApiKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1UsersByUserIdApiKeysByApiKeyIdResponses, PostV1UsersByUserIdApiKeysByApiKeyIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/api-keys/{api_key_id}',
        ...options
    });
};

export const getV1UsersByUserIdRoles = <ThrowOnError extends boolean = false>(options: Options<GetV1UsersByUserIdRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1UsersByUserIdRolesResponses, GetV1UsersByUserIdRolesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/roles',
        ...options
    });
};

export const getV1UsersByUserIdWaitlists = <ThrowOnError extends boolean = false>(options: Options<GetV1UsersByUserIdWaitlistsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1UsersByUserIdWaitlistsResponses, GetV1UsersByUserIdWaitlistsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/waitlists',
        ...options
    });
};

export const postV1UsersByUserIdWaitlists = <ThrowOnError extends boolean = false>(options: Options<PostV1UsersByUserIdWaitlistsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1UsersByUserIdWaitlistsResponses, PostV1UsersByUserIdWaitlistsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/waitlists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteV1UsersByUserIdWaitlistsByWaitlistId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1UsersByUserIdWaitlistsByWaitlistIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1UsersByUserIdWaitlistsByWaitlistIdResponses, DeleteV1UsersByUserIdWaitlistsByWaitlistIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/waitlists/{waitlist_id}',
        ...options
    });
};