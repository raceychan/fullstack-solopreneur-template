// This file is auto-generated by @hey-api/openapi-ts

/**
 * OAuthLogin
 * OAuth2 login form model.
 *
 * This model is used to represent the data required for OAuth2 password grant type authentication.
 * It includes fields for username, password, grant type, client ID, client secret, scope, and scopes.
 * refference: https://datatracker.ietf.org/doc/html/rfc6749
 */
export type OAuthLogin = {
    username: string;
    password: string;
    grant_type?: string | null;
    client_id?: string | null;
    client_secret?: string | null;
    scope?: string;
    scopes?: Array<string>;
};

/**
 * ProblemDetail
 * ## Specification:
 * - RFC 9457: https://www.rfc-editor.org/rfc/rfc9457.html
 *
 * This schema provides a standardized way to represent errors in HTTP APIs,
 * allowing clients to understand error responses in a structured format.
 */
export type ProblemDetail = {
    /**
     * A URI reference that identifies the type of problem.
     */
    type_: string;
    /**
     * The HTTP status code for this problem occurrence.
     */
    status: number;
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * A human-readable explanation specific to this occurrence.
     */
    detail: unknown;
    /**
     * A URI reference identifying this specific problem occurrence.
     */
    instance: string;
};

/**
 * ValidationProblem
 */
export type ValidationProblem = {
    location: 'body' | 'cookie' | 'header' | 'path' | 'plugin' | 'query';
    param: string;
    message: string;
};

/**
 * Check Your Params
 */
export type InvalidRequestErrors = {
    /**
     * A URI reference that identifies the type of problem.
     */
    type_?: string;
    /**
     * The HTTP status code for this problem occurrence.
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type.
     */
    title?: string;
    detail?: Array<ValidationProblem>;
    /**
     * A URI reference identifying this specific problem occurrence.
     */
    instance?: string;
};

/**
 * PublicUser
 */
export type PublicUser = {
    email: string;
    last_login: string;
};

/**
 * We received your credential but could not validate it
 */
export type InvalidAuthError = {
    /**
     * A URI reference that identifies the type of problem.
     */
    type_?: string;
    /**
     * The HTTP status code for this problem occurrence.
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type.
     */
    title?: string;
    /**
     * A human-readable explanation specific to this occurrence.
     */
    detail?: unknown;
    /**
     * A URI reference identifying this specific problem occurrence.
     */
    instance?: string;
};

export type LoginGetTokenTokenPostData = {
    body: OAuthLogin;
    path?: never;
    query?: never;
    url: '/token';
};

export type LoginGetTokenTokenPostErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type LoginGetTokenTokenPostError = LoginGetTokenTokenPostErrors[keyof LoginGetTokenTokenPostErrors];

export type LoginGetTokenTokenPostResponses = {
    /**
     * Sucessful Response
     */
    200: unknown;
};

export type GetUserMeGetData = {
    body?: never;
    headers?: {
        Authorization?: {
            [key: string]: unknown;
        } | null;
    };
    path?: never;
    query?: never;
    url: '/me';
};

export type GetUserMeGetErrors = {
    /**
     * Unauthorized
     */
    401: InvalidAuthError;
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type GetUserMeGetError = GetUserMeGetErrors[keyof GetUserMeGetErrors];

export type GetUserMeGetResponses = {
    /**
     * Successful Response
     */
    200: PublicUser;
};

export type GetUserMeGetResponse = GetUserMeGetResponses[keyof GetUserMeGetResponses];

export type ClientOptions = {
    baseURL: `${string}://openapi.json` | (string & {});
};