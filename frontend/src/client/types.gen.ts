// This file is auto-generated by @hey-api/openapi-ts

/**
 * OAuthLogin
 * OAuth2 login form model.
 *
 * This model is used to represent the data required for OAuth2 password grant type authentication.
 * It includes fields for username, password, grant type, client ID, client secret, scope, and scopes.
 * refference: https://datatracker.ietf.org/doc/html/rfc6749
 */
export type OAuthLogin = {
    username: string;
    password: string;
    grant_type?: string | null;
    client_id?: string | null;
    client_secret?: string | null;
    scope?: string;
    scopes?: Array<string>;
};

/**
 * OAuth2Token
 * https://www.oauth.com/oauth2-servers/access-tokens/access-token-response/
 */
export type OAuth2Token = {
    access_token: string;
    expires_in: number;
    token_type?: 'Bearer';
    refresh_token?: string;
    scope?: string;
};

/**
 * ProblemDetail
 * ## Specification:
 * - RFC 9457: https://www.rfc-editor.org/rfc/rfc9457.html
 *
 * This schema provides a standardized way to represent errors in HTTP APIs,
 * allowing clients to understand error responses in a structured format.
 */
export type ProblemDetail = {
    /**
     * A URI reference that identifies the type of problem.
     */
    type_: string;
    /**
     * The HTTP status code for this problem occurrence.
     */
    status: number;
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * A human-readable explanation specific to this occurrence.
     */
    detail: unknown;
    /**
     * A URI reference identifying this specific problem occurrence.
     */
    instance: string;
};

/**
 * ValidationProblem
 */
export type ValidationProblem = {
    location: 'body' | 'cookie' | 'header' | 'path' | 'plugin' | 'query';
    param: string;
    message: string;
};

/**
 * Check Your Params
 */
export type InvalidRequestErrors = {
    /**
     * A URI reference that identifies the type of problem.
     */
    type_?: string;
    /**
     * The HTTP status code for this problem occurrence.
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type.
     */
    title?: string;
    detail?: Array<ValidationProblem>;
    /**
     * A URI reference identifying this specific problem occurrence.
     */
    instance?: string;
};

/**
 * SignUpRequest
 */
export type SignUpRequest = {
    email: string;
    password: string;
};

/**
 * UserProfileDTO
 */
export type UserProfileDto = {
    id: string;
    first_name?: string | null;
    last_name?: string | null;
    username?: string | null;
    email: string;
    phone_number?: string | null;
    status: UserStatus;
    role: UserRole;
    gmt_created: string;
    gmt_modified: string;
};

/**
 * UserStatus
 */
export type UserStatus = 'active' | 'inactive' | 'invited' | 'suspended';

/**
 * UserRole
 */
export type UserRole = 'admin' | 'manager' | 'superadmin' | 'user';

/**
 * We received your credential but could not validate it
 */
export type InvalidAuthError = {
    /**
     * A URI reference that identifies the type of problem.
     */
    type_?: string;
    /**
     * The HTTP status code for this problem occurrence.
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type.
     */
    title?: string;
    /**
     * A human-readable explanation specific to this occurrence.
     */
    detail?: unknown;
    /**
     * A URI reference identifying this specific problem occurrence.
     */
    instance?: string;
};

/**
 * TaskDTO
 */
export type TaskDto = {
    id: number;
    title: string;
    status: TaskStatus;
    label: TaskLabel;
    priority: TaskPriority;
    gmt_created: string;
    gmt_modified: string;
};

/**
 * TaskStatus
 */
export type TaskStatus = 'backlog' | 'canceled' | 'done' | 'in progress' | 'todo';

/**
 * TaskLabel
 */
export type TaskLabel = 'bug' | 'documentation' | 'feature';

/**
 * TaskPriority
 */
export type TaskPriority = 'high' | 'low' | 'medium';

/**
 * TaskCreate
 */
export type TaskCreate = {
    title: string;
    status: TaskStatus;
    label: TaskLabel;
    priority: TaskPriority;
};

/**
 * TaskUpdate
 */
export type TaskUpdate = {
    title: string;
    status: TaskStatus;
    label: TaskLabel;
    priority: TaskPriority;
};

/**
 * UserProfileCreate
 */
export type UserProfileCreate = {
    first_name?: string | null;
    last_name?: string | null;
    username?: string | null;
    email: string;
    phone_number?: string | null;
    status?: UserStatus;
    role?: UserRole;
};

/**
 * UserProfileUpdate
 */
export type UserProfileUpdate = {
    first_name?: string | null;
    last_name?: string | null;
    username?: string | null;
    email: string;
    phone_number?: string | null;
    status?: UserStatus;
    role?: UserRole;
};

export type LoginGetTokenApiV1TokenPostData = {
    body: OAuthLogin;
    path?: never;
    query?: never;
    url: '/api/v1/token';
};

export type LoginGetTokenApiV1TokenPostErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type LoginGetTokenApiV1TokenPostError = LoginGetTokenApiV1TokenPostErrors[keyof LoginGetTokenApiV1TokenPostErrors];

export type LoginGetTokenApiV1TokenPostResponses = {
    /**
     * Successful Response
     */
    200: OAuth2Token;
};

export type LoginGetTokenApiV1TokenPostResponse = LoginGetTokenApiV1TokenPostResponses[keyof LoginGetTokenApiV1TokenPostResponses];

export type SignUpApiV1AuthPostData = {
    body: SignUpRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth';
};

export type SignUpApiV1AuthPostErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type SignUpApiV1AuthPostError = SignUpApiV1AuthPostErrors[keyof SignUpApiV1AuthPostErrors];

export type SignUpApiV1AuthPostResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type GetMeApiV1AuthMeGetData = {
    body?: never;
    headers?: {
        Authorization?: {
            [key: string]: unknown;
        } | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/me';
};

export type GetMeApiV1AuthMeGetErrors = {
    /**
     * Unauthorized
     */
    401: InvalidAuthError;
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type GetMeApiV1AuthMeGetError = GetMeApiV1AuthMeGetErrors[keyof GetMeApiV1AuthMeGetErrors];

export type GetMeApiV1AuthMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserProfileDto;
};

export type GetMeApiV1AuthMeGetResponse = GetMeApiV1AuthMeGetResponses[keyof GetMeApiV1AuthMeGetResponses];

export type RemoveTaskApiV1TasksDeleteData = {
    body?: never;
    path?: never;
    query: {
        task_id: number;
    };
    url: '/api/v1/tasks';
};

export type RemoveTaskApiV1TasksDeleteErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type RemoveTaskApiV1TasksDeleteError = RemoveTaskApiV1TasksDeleteErrors[keyof RemoveTaskApiV1TasksDeleteErrors];

export type RemoveTaskApiV1TasksDeleteResponses = {
    /**
     * Sucessful Response
     */
    200: unknown;
};

export type GetTasksApiV1TasksGetData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/tasks';
};

export type GetTasksApiV1TasksGetErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type GetTasksApiV1TasksGetError = GetTasksApiV1TasksGetErrors[keyof GetTasksApiV1TasksGetErrors];

export type GetTasksApiV1TasksGetResponses = {
    /**
     * Successful Response
     */
    200: Array<TaskDto>;
};

export type GetTasksApiV1TasksGetResponse = GetTasksApiV1TasksGetResponses[keyof GetTasksApiV1TasksGetResponses];

export type CreateNewTaskApiV1TasksPostData = {
    body: TaskCreate;
    path?: never;
    query?: never;
    url: '/api/v1/tasks';
};

export type CreateNewTaskApiV1TasksPostErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type CreateNewTaskApiV1TasksPostError = CreateNewTaskApiV1TasksPostErrors[keyof CreateNewTaskApiV1TasksPostErrors];

export type CreateNewTaskApiV1TasksPostResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type UpdateTaskApiV1TasksPutData = {
    body: TaskUpdate;
    path?: never;
    query: {
        task_id: number;
    };
    url: '/api/v1/tasks';
};

export type UpdateTaskApiV1TasksPutErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type UpdateTaskApiV1TasksPutError = UpdateTaskApiV1TasksPutErrors[keyof UpdateTaskApiV1TasksPutErrors];

export type UpdateTaskApiV1TasksPutResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type RemoveProfileApiV1ProfilesDeleteData = {
    body?: never;
    path?: never;
    query: {
        profile_id: string;
    };
    url: '/api/v1/profiles';
};

export type RemoveProfileApiV1ProfilesDeleteErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type RemoveProfileApiV1ProfilesDeleteError = RemoveProfileApiV1ProfilesDeleteErrors[keyof RemoveProfileApiV1ProfilesDeleteErrors];

export type RemoveProfileApiV1ProfilesDeleteResponses = {
    /**
     * Sucessful Response
     */
    200: unknown;
};

export type GetProfilesApiV1ProfilesGetData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/profiles';
};

export type GetProfilesApiV1ProfilesGetErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type GetProfilesApiV1ProfilesGetError = GetProfilesApiV1ProfilesGetErrors[keyof GetProfilesApiV1ProfilesGetErrors];

export type GetProfilesApiV1ProfilesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<UserProfileDto>;
};

export type GetProfilesApiV1ProfilesGetResponse = GetProfilesApiV1ProfilesGetResponses[keyof GetProfilesApiV1ProfilesGetResponses];

export type CreateNewProfileApiV1ProfilesPostData = {
    body: UserProfileCreate;
    path?: never;
    query?: never;
    url: '/api/v1/profiles';
};

export type CreateNewProfileApiV1ProfilesPostErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type CreateNewProfileApiV1ProfilesPostError = CreateNewProfileApiV1ProfilesPostErrors[keyof CreateNewProfileApiV1ProfilesPostErrors];

export type CreateNewProfileApiV1ProfilesPostResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type UpdateProfileApiV1ProfilesPutData = {
    body: UserProfileUpdate;
    path?: never;
    query: {
        profile_id: string;
    };
    url: '/api/v1/profiles';
};

export type UpdateProfileApiV1ProfilesPutErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type UpdateProfileApiV1ProfilesPutError = UpdateProfileApiV1ProfilesPutErrors[keyof UpdateProfileApiV1ProfilesPutErrors];

export type UpdateProfileApiV1ProfilesPutResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type LambdaApiV1HealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health';
};

export type LambdaApiV1HealthGetErrors = {
    /**
     * Unprocessable Entity
     */
    422: InvalidRequestErrors;
};

export type LambdaApiV1HealthGetError = LambdaApiV1HealthGetErrors[keyof LambdaApiV1HealthGetErrors];

export type LambdaApiV1HealthGetResponses = {
    /**
     * Sucessful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: `${string}://openapi.json` | (string & {});
};